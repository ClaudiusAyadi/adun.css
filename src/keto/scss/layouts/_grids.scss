/* DO NOT TOUCH */

/* GRID SYSTEM */
@mixin grids {
	@for $i from 1 through 12 {
		--grid-#{$i}: repeat(#{$i}, minmax(0, 1fr));
	}
}

/* GRID UTILITY CLASSES */
@for $i from 1 through 12 {
	.grid-#{$i} {
		display: grid;
		grid-template-columns: var(--grid-#{$i});
	}
}

/* OTHER GRIDS */
$more-grids: (
	grid-1-2: minmax(0, 1fr) minmax(0, 2fr),
	grid-1-3: minmax(0, 1fr) minmax(0, 3fr),
	grid-2-1: minmax(0, 2fr) minmax(0, 1fr),
	grid-2-3: minmax(0, 2fr) minmax(0, 3fr),
	grid-3-1: minmax(0, 3fr) minmax(0, 1fr),
	grid-3-2: minmax(0, 3fr) minmax(0, 2fr),
	grid-auto-2: repeat(auto-fit, minmax(min(43.6789297659rem, 100vw - 6rem), 1fr)),
	grid-auto-3: repeat(auto-fit, minmax(min(32.7318295739rem, 100vw - 6rem), 1fr)),
	grid-auto-4: repeat(auto-fit, minmax(min(26.1723446894rem, 100vw - 6rem), 1fr)),
	grid-auto-5: repeat(auto-fit, minmax(min(21.8030050083rem, 100vw - 6rem), 1fr)),
	grid-auto-6: repeat(auto-fit, minmax(min(18.6838340486rem, 100vw - 6rem), 1fr)),
);

@mixin more-grids {
	@each $grid, $value in $more-grids {
		--#{$grid}: #{$value};
	}
}

@each $grid, $value in $other-grids {
	.#{$grid} {
		display: grid;
		grid-template-columns: var(#{$grid});
	}
}

/* COLUMN COUNTS */
@for $i from 2 through 5 {
	.col-#{$i} {
		column-count: #{$i};
	}
}

/* FLEXBOX */
.flex {
	--direction: row;

	display: flex;
	flex-direction: var(--direction);
}

.center-all {
	align-items: center;
	justify-content: center;
}

.align-center {
	align-items: center;
}

.justify-center {
	justify-content: center;
}

/* QUICK ORDERING PROPERTIES */

.first {
	order: -1;
}

.last {
	order: 999;
}
